#!/bin/bash
#
# Title:      PSAutomate
# Based On:   PGBlitz (Reference Title File)
# Original Author(s):  Admin9705 - Deiteq - Sub7even
# PSAutomate Auther: fattylewis
# URL:        https://psautomate.io - http://github.psautomate.io
# GNU:        General Public License v3.0
################################################################################
runningcheck () {
  initial2
  runcheck5=$(docker ps | grep ${program_var})
  if [ "$runcheck5" != "" ]; then running=1; else running=0; fi
}

initial () {
  rm -rf /psa/var/psavault.output 1>/dev/null 2>&
  rm -rf /psa/var/psavault.buildup 1>/dev/null 2>&1
  rm -rf /psa/var/program.temp 1>/dev/null 2>&1
  rm -rf /psa/var/app.list 1>/dev/null 2>&1
  rm -rf /psa/var/psavault.output 1>/dev/null 2>&1
  touch /psa/var/psavault.output
  touch /psa/var/program.temp
  touch /psa/var/app.list
  touch /psa/var/psavault.buildup
  touch /psa/var/psavault.output
  touch /psa/var/rclone.size
  space=$(cat /psa/var/data.location)
  # To Get Used Space
  used=$(df -h /psa/data/psablitz | tail -n +2 | awk '{print $3}')
  # To Get All Space
  capacity=$(df -h /psa/data/psablitz | tail -n +2 | awk '{print $2}')
  # Percentage
  percentage=$(df -h /psa/data/psablitz | tail -n +2 | awk '{print $5}')
}

initial2 () {
  path=$(cat /psa/var/hd.path)
  tarlocation=$(cat /psa/var/data.location)
  program_size=$(cat /psa/var/rclone.size)
  program_var=$(cat /psa/tmp/program_var)
  server_id=$(cat /psa/var/server.id)
}

final () {
  echo
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  read -p '✅ Process Complete! | PRESS [ENTER] ' typed < /dev/tty
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  bash /psa/psavault/psavault.sh
  exit
}

queued () {
  echo
  read -p '⛔️ ERROR - APP Already Queued! | Press [ENTER] ' typed < /dev/tty
}

badserver () {
  echo
  read -p '⛔️ ERROR - Type an Exact Server Name | Press [ENTER] ' typed < /dev/tty
}

#not used yet
rclonelist () {
  ls -l  /psa/gd/psautomate/backup | grep "^d" | awk '{print $9}' > psavault.serverlist
}

psaboxrecall () {
  ls -p /psa/coreapps/apps | grep -v / > /psa/var/psavault.apprecall
  while read p; do
    sed -i "/^$p\b/Id" /psa/var/psavault.apprecall
  done </psa/psavault/exempt.list

  while read p; do
    sed -i "/^$p\b/Id" /psa/var/psavault.apprecall
    basename "$p" .yml >> /psa/var/psavault.apprecall
  done </psa/var/psavault.apprecall
}

mathprime () {
  ### List Out Apps In Readable Order (One's Not Installed)
  num=0
  rm -rf /psa/var/program.temp 1>/dev/null 2>&1
  while read p; do
    echo -n $p >> /psa/var/program.temp
    echo -n " " >> /psa/var/program.temp
    num=$[num+1]
    if [ "$num" == 7 ]; then
      num=0
      echo " " >> /psa/var/program.temp
    fi
  done </psa/var/psavault.apprecall
}

################################################ FOR BACKUP - START
apprecall () {
  tree -d -L 1 /psa/data | awk '{print $2}' | tail -n +2 | head -n -2 > /psa/var/psavault.apprecall
  while read p; do
    sed -i "/^$p\b/Id" /psa/var/psavault.apprecall
  done </psa/psavault/exempt.list

  ### Blank Out Temp List
  rm -rf /psa/var/program.temp && touch /psa/var/program.temp
  mathprime
}

buildup () {
  echo "$typed" >> /psa/var/psavault.buildup
  sed -i "/^$typed\b/Id" /psa/var/psavault.apprecall

  num=0
  rm -rf /psa/var/psavault.output 1>/dev/null 2>&1
  while read p; do
  echo -n $p >> /psa/var/psavault.output
  echo -n " " >> /psa/var/psavault.output
  if [ "$num" == 7 ]; then
    num=0
    echo " " >> /psa/var/psavault.output
  fi
  done </psa/var/psavault.buildup

  mathprime
  vaultbackup
}
################################################ FOR BACKUP - END
serverprime () {
  tree -d -L 1 /psa/gd/psautomate/backup | awk '{print $2}' | tail -n +2 | head -n -2 > /psa/tmp/server.list

  ### List Out Apps In Readable Order (One's Not Installed)
  num=0
  rm -rf /psa/var/program.temp 1>/dev/null 2>&1
  while read p; do
    echo -n $p >> /psa/var/program.temp
    echo -n " " >> /psa/var/program.temp
    num=$[num+1]
    if [ "$num" == 7 ]; then
      num=0
      echo " " >> /psa/var/program.temp
    fi
  done </psa/tmp/server.list

servers=$(cat /psa/var/program.temp)
server_id=$(cat /psa/var/server.id)

tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🚀 PSA Vault ~ Server Recall            📓 Reference: psavault.psautomate.io
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📂 Current [${server_id}] & Prior Servers Detected:

$servers

💬 Quitting? TYPE > exit
EOF
read -p '🌍 Type Server Name | Press [ENTER]: ' server < /dev/tty
  echo $server > /psa/tmp/server.select

  if [ "$server" == "exit" ]; then exit; fi

  current2=$(cat /psa/tmp/server.list | grep "\<$server\>")
  if [ "$current2" == "" ]; then
  badserver
  serverprime; fi

  tempserver=$server
  ls -l  /psa/gd/psautomate/backup/$tempserver | awk '{print $9}' | tail -n +2 > /psa/var/psavault.restoreapps

  ### Blank Out Temp List
  rm -rf /psa/var/psavault.apprecall 1>/dev/null 2>&1
  touch /psa/var/psavault.apprecall

  while read p; do
    basename "$p" .tar >> /psa/var/psavault.apprecall
  done </psa/var/psavault.restoreapps

  ### Blank Out Temp List
  rm -rf /psa/var/program.temp 1>/dev/null 2>&1
  touch /psa/var/program.temp
  mathprime
}

buildup2 () {
  echo "$typed" >> /psa/var/psavault.buildup
  sed -i "/^$typed\b/Id" /psa/var/psavault.apprecall

  num=0
  rm -rf /psa/var/psavault.output 1>/dev/null 2>&1
  while read p; do
  echo -n $p >> /psa/var/psavault.output
  echo -n " " >> /psa/var/psavault.output
  if [ "$num" == 7 ]; then
    num=0
    echo " " >> /psa/var/psavault.output
  fi
  done </psa/var/psavault.buildup

  mathprime
  vaultrestore
}
################################################ FOR RESTORE - START

################################################ FOR RESTORE - END


######################################################## START - PG Vault Backup
backup_start () {
  while read p; do
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
PSA Vault - Backing Up: $p
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
EOF

  sleep 2.5

  # Store Used Program
  echo $p > /psa/tmp/program_var
  # Execute Main Program
  backup_process

  sleep 2
  done </psa/var/psavault.buildup
  final
}

backup_process () {
initial2
#tee <<-EOF

#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#↘️  Determining Initial File Size - $program_var
#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#EOF
#size=$(du -sh --apparent-size /psa/data/$program_var | /usr/bin/awk '{print $1}')
#sleep 2
#echo "Initial File Size: $size"
#sleep 2

##### Stop Docker Container if Running
runningcheck
if [ "$running" == "1" ]; then
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
↘️  Stopping Docker Container - $program_var
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
EOF
sleep 1
docker stop $program_var 1>/dev/null 2>&1; fi

###### Start the Backup Process - Backup Locally First
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
↘️  Zipping Data Locally - $program_var
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
EOF

path=$(cat /psa/var/hd.path)
tarlocation=$(cat /psa/var/data.location)
server_id=$(cat /psa/var/server.id)

tar \
  --warning=no-file-changed --ignore-failed-read --absolute-names --warning=no-file-removed \
  --exclude-from=/psa/psavault/exclude.list \
  -C /psa/tmp/${program_var} -cvf /psa/var/${program_var}.tar ./

#tar \
#--warning=no-file-changed --ignore-failed-read --absolute-names --warning=no-file-removed \
#--exclude-from=/psa/psavault/exclude.list \
#-cfv ${program_var}.tar /psa/tmp/${program_var}

##### Restart Docker Application if was Running Prior
if [ "$running" == "1" ]; then
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
↘️  Restarting Docker Application - $program_var
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
EOF
sleep 2
docker restart $program_var 1>/dev/null 2>&1; fi

###### Backing Up Files to GDrive
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
↘️  Sending Zipped Data to Google Drive - $program_var
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
EOF

rclone --config /psa/var/rclone/psablitz.conf mkdir gdrive:/psautomate/backup/${server_id} 1>/dev/null 2>&1

rclone --config /psa/var/rclone/psablitz.conf \
--stats-one-line --stats 1s --progress \
moveto ${tarlocation}/${program_var}.tar \
gdrive:/psautomate/backup/${server_id}/${program_var}.tar \
-v --checksum --drive-chunk-size=64M --transfers=8

##### Remove File Incase
rm -rf ${tarlocation}/${program_var}.tar 1>/dev/null 2>&1
}
######################################################## END - PG Vault Backup
#
##################################################### START - PG Vault Restore
restore_start () {

while read p; do
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
PSA Vault - Restoring: $p
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
EOF

sleep 2.5

# Store Used Program
echo $p > /psa/tmp/program_var
# Execute Main Program
restore_process

sleep 2
done </psa/var/psavault.buildup
final
}

restore_process () {
initial2
srecall=$(cat /psa/tmp/server.select)
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
↘️  Determining Initial File Size - $program_var
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
EOF
size=$(du -sh --apparent-size /psa/gd/psautomate/backup/${srecall}/${program_var}.tar | /usr/bin/awk '{print $1}')
sleep 2
echo "Initial File Size: $size"
sleep 2

###### Backing Up Files to GDrive
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
↘️  Downloading Data From Google Drive - $program_var
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
EOF

rclone --config /psa/var/rclone/psablitz.conf --stats-one-line \
--stats 1s --progress \
copy gdrive:/psautomate/backup/${srecall}/${program_var}.tar \
${tarlocation} \
-v --checksum --drive-chunk-size=64M --transfers=8

##### Stop Docker Container if Running
runningcheck
if [ "$running" == "1" ]; then
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
↘️  Stopping Docker Container - $program_var
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
EOF
sleep 1
docker stop $program_var 1>/dev/null 2>&1; fi

###### Start the Backup Process - Backup Locally First
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
↘️  UnZipping & Restoring Data - $program_var
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
EOF

mkdir -p "/psa/tmp/${program_var}"
rm -rf "/psa/tmp/${program_var}/*"
chown -R 1000:1000 "/psa/tmp/${program_var}"
chmod -R 775 "/psa/tmp/${program_var}"
tar -C /psa/tmp/${program_var} -xvf ${tarlocation}/${program_var}.tar
chown -R 1000:1000 "/psa/tmp/${program_var}"
chmod -R 775 "/psa/tmp/${program_var}"

##### Restart Docker Application if was Running Prior
if [ "$running" == "1" ]; then
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
↘️  Restarting Docker Application - $program_var
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
EOF
sleep 2
docker restart $program_var 1>/dev/null 2>&1; fi

##### Remove File Incase
rm -rf ${tarlocation}/${program_var}.tar 1>/dev/null 2>&1
}
##################################################### END - PG Vault Restore
#
##################################################### START - Backup Interface
vaultbackup () {
### List Out Apps In Readable Order (One's Not Installed)
notrun=$(cat /psa/var/program.temp)
buildup=$(cat /psa/var/psavault.output)

if [ "$buildup" == "" ]; then buildup="NONE"; fi
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🚀 PSA Vault ~ Data Storage             📓 Reference: psavault.psautomate.io
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📂 Potential Data to Backup

$notrun

💾 Apps Queued for Backup

$buildup

💬 Quitting? TYPE > exit | 💪 Ready to Backup? TYPE > deploy
EOF
read -p '🌍 Type APP for QUEUE | Press [ENTER]: ' typed < /dev/tty

if [ "$typed" == "deploy" ]; then backup_start; fi
if [ "$typed" == "exit" ]; then exit; fi

current2=$(cat /psa/var/psavault.buildup | grep "\<$typed\>")
if [ "$current2" != "" ]; then
queued
vaultbackup; fi

cat /psa/var/psavault.buildup > /psa/tmp/appcheck.5
cat /psa/var/psavault.apprecall >> /psa/tmp/appcheck.5
current1=$(cat /psa/tmp/appcheck.5 | grep "\<$typed\>")
if [ "$current1" == "" ]; then badinput && vaultbackup; fi

buildup
}
##################################################### END - Backup Interface
#
##################################################### START - Restore Interface
vaultrestore () {
notrun=$(cat /psa/var/program.temp)
buildup=$(cat /psa/var/psavault.output)

if [ "$buildup" == "" ]; then buildup="NONE"; fi
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🚀 PSA Vault ~ Data Recall              📓 Reference: psavault.psautomate.io
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📂 Potential Data to Restore

$notrun

💾 Apps Queued for Restore

$buildup

💬 Quitting? TYPE > exit | 💪 Ready to Restore? TYPE > deploy
EOF
read -p '🌍 Type APP for QUEUE | Press [ENTER]: ' typed < /dev/tty

if [ "$typed" == "deploy" ]; then restore_start; fi
if [ "$typed" == "exit" ]; then exit; fi

current2=$(cat /psa/var/psavault.buildup | grep "\<$typed\>")
if [ "$current2" != "" ]; then
queued
vaultrestore; fi

cat /psa/var/psavault.buildup > /psa/tmp/appcheck.5
cat /psa/var/psavault.apprecall >> /psa/tmp/appcheck.5
current1=$(cat /psa/tmp/appcheck.5 | grep "\<$typed\>")
if [ "$current1" == "" ]; then badinput && vaultrestore; fi

buildup2
}
##################################################### START Primary Interface
primaryinterface () {
  initial2
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📁  PSA Vault - Main Interface          📓 Reference: psavault.psautomate.io
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🌵  PSA Disk Used Space: $used of $capacity | $percentage Used Capacity

[1] Data Backup
[2] Data Restore
[3] Current Server ID  : $server_id
[4] Processing Location: $tarlocation
[Z] Exit

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
EOF
  read -p 'Type a Number | Press [ENTER]: ' typed < /dev/tty

    if [ "$typed" == "1" ]; then
    vaultbackup
    primaryinterface
  elif [ "$typed" == "2" ]; then
    serverprime
    vaultrestore
    primaryinterface
  elif [ "$typed" == "3" ]; then
    echo "0" > /psa/var/server.id.stored
    bash /psa/psablitz/menu/interface/serverid.sh
    primaryinterface
  elif [ "$typed" == "4" ]; then
    bash /psa/psablitz/menu/data/location.sh
    primaryinterface
  elif [[ "$typed" == "Z" || "$typed" == "z" ]]; then
    exit
  else
    badinput
    primaryinterface
  fi
}
##################################################### END Primary Interface

restorecheck () {
  if [ "$restoreid" == "[NOT-SET]" ]; then
tee <<-EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⛔️  WARNING! - You Must Set Your Recovery ID First! Restarting Process!
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

EOF
read -n 1 -s -r -p "Press [ANY] Key to Continue "
echo
  primaryinterface
exit
  fi
}
